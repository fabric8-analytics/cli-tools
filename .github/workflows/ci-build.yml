name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  report:
    name: Refresh GoReportCard
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
    - name: Trigger report refresh
      uses: creekorful/goreportcard-action@v1.0

  lint:
    name: Lint project
    runs-on: ubuntu-latest

    steps:
    - name: Checkout project
      uses: actions/checkout@v3

    - name: Setup Go 1.20
      uses: actions/setup-go@v4
      with:
        go-version: "^1.20"

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest

    - name: Run vet
      run: go vet ./...

    - name: Run staticcheck
      run: go run honnef.co/go/tools/cmd/staticcheck@latest ./...

  build_gomanifest:
    name: Build GoManifest on ${{ matrix.os }}
    needs: [lint]
    strategy:
      matrix:
        os: [ "ubuntu-latest",  "macos-latest", "windows-latest" ]
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: gomanifest

    steps:
    - name: Checkout project
      uses: actions/checkout@v3

    - name: Setup Go 1.15
      uses: actions/setup-go@v4
      with:
        go-version: 1.15

    - name: Build tool
      run: go build -o ${{ runner.temp }}/gomanifest

  build_module:
    name: Build module
    needs: [lint]
    strategy:
      matrix:
        version: ["1.18",  "1.19", "1.20"]
    runs-on: ubuntu-latest

    steps:
    - name: Checkout project
      uses: actions/checkout@v3

    - name: Setup Go ${{ matrix.version }}
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.version }}

    - name: Verify go.mod
      run: |
        go mod tidy
        git diff --exit-code go.mod

    - name: Unit Test
      run:  go test `go list ./... | grep -v acceptance-tests` -gcflags=-l -v  -coverprofile=coverage.txt -covermode=atomic

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
